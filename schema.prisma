generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Ajustar seg√∫n la base de datos utilizada
  url      = env("DATABASE_URL")
}

model Company {
  id       Int      @id @default(autoincrement())
  name     String
  employees Employee[]
  positions Position[]
}

model Employee {
  id        Int      @id @default(autoincrement())
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  name      String
  email     String  @unique
  role      String
  isActive  Boolean @default(true)
  interviews Interview[]
}

model InterviewFlow {
  id          Int             @id @default(autoincrement())
  description String?
  positions   Position[]
  steps       InterviewStep[]
}

model InterviewType {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  steps       InterviewStep[]
}

model InterviewStep {
  id              Int            @id @default(autoincrement())
  interviewFlow   InterviewFlow  @relation(fields: [interviewFlowId], references: [id])
  interviewFlowId Int
  interviewType   InterviewType  @relation(fields: [interviewTypeId], references: [id])
  interviewTypeId Int
  name           String
  orderIndex     Int
  interviews     Interview[]
}

model Position {
  id                Int             @id @default(autoincrement())
  company           Company         @relation(fields: [companyId], references: [id])
  companyId        Int
  interviewFlow    InterviewFlow    @relation(fields: [interviewFlowId], references: [id])
  interviewFlowId  Int?
  title            String
  description      String?
  status          String
  isVisible        Boolean @default(true)
  location        String?
  jobDescription  String?
  requirements    String?
  responsibilities String?
  salaryMin       Float?
  salaryMax       Float?
  employmentType  String?
  benefits        String?
  companyDescription String?
  applicationDeadline DateTime?
  contactInfo     String?
  applications    Application[]
}

model Candidate {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String @unique
  phone     String?
  address   String?
  applications Application[]
}

model Application {
  id          Int       @id @default(autoincrement())
  position    Position  @relation(fields: [positionId], references: [id])
  positionId  Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  applicationDate DateTime @default(now())
  status      String
  notes       String?
  history     ApplicationHistory[]
  interviews  Interview[]
}

model ApplicationHistory {
  id             Int         @id @default(autoincrement())
  application    Application @relation(fields: [applicationId], references: [id])
  applicationId  Int
  status        String
  changedAt     DateTime @default(now())
  changedBy     Employee? @relation(fields: [changedById], references: [id])
  changedById   Int?
}

model Interview {
  id              Int            @id @default(autoincrement())
  application     Application    @relation(fields: [applicationId], references: [id])
  applicationId   Int
  interviewStep   InterviewStep  @relation(fields: [interviewStepId], references: [id])
  interviewStepId Int
  employee       Employee?       @relation(fields: [employeeId], references: [id])
  employeeId     Int?
  interviewDate  DateTime
  result         String?
  score         Int?
  notes         String?
  events        InterviewEvent[]
}

model InterviewEvent {
  id            Int       @id @default(autoincrement())
  interview     Interview @relation(fields: [interviewId], references: [id])
  interviewId   Int
  eventType     String
  eventDate     DateTime @default(now())
  details       String?
}
